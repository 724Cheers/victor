(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],2:[function(require,module,exports){
/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function (name, definition) {

  if (typeof module != 'undefined') module.exports = definition()
  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)
  else this[name] = definition()

}('domready', function () {

  var fns = [], listener
    , doc = document
    , domContentLoaded = 'DOMContentLoaded'
    , loaded = /^loaded|^i|^c/.test(doc.readyState)

  if (!loaded)
  doc.addEventListener(domContentLoaded, listener = function () {
    doc.removeEventListener(domContentLoaded, listener)
    loaded = 1
    while (listener = fns.shift()) listener()
  })

  return function (fn) {
    loaded ? fn() : fns.push(fn)
  }

});

},{}],3:[function(require,module,exports){
var now = require('performance-now')
  , global = typeof window === 'undefined' ? {} : window
  , vendors = ['ms', 'moz', 'webkit', 'o']
  , suffix = 'AnimationFrame'
  , raf = global['request' + suffix]
  , caf = global['cancel' + suffix] || global['cancelRequest' + suffix]

for(var i = 0; i < vendors.length && !raf; i++) {
  raf = global[vendors[i] + 'Request' + suffix]
  caf = global[vendors[i] + 'Cancel' + suffix]
      || global[vendors[i] + 'CancelRequest' + suffix]
}

if(!raf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for (var i = 0; i < cp.length; i++) {
          if (!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {}
          }
        }
      }, next)
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function() {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.apply(global, arguments)
}
module.exports.cancel = function() {
  caf.apply(global, arguments)
}

},{"performance-now":4}],4:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.6.3
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

/*
//@ sourceMappingURL=performance-now.map
*/

}).call(this,require("FWaASH"))
},{"FWaASH":1}],5:[function(require,module,exports){
exports = module.exports = drawArrow;

// This was borrowed from
//  - http://deepliquid.com/blog/archives/98
//  - http://deepliquid.com/projects/blog/arrows2.html

function drawArrow (ctx) {
	var arrow_shape = [
		[ -10, -4 ],
		[ -8, 0 ],
		[ -10, 4 ],
		[ 2, 0 ]
	];

	function drawLineArrow(ctx, x1, y1, x2, y2) {
		ctx.beginPath();
		ctx.moveTo(x1,y1);
		ctx.lineTo(x2,y2);
		ctx.stroke();
		var ang = Math.atan2(y2 - y1, x2 - x1);
		drawFilledPolygon(ctx, translateShape(rotateShape(arrow_shape, ang), x2, y2));
	}

	return function (x1, y1, x2, y2, color) {
		ctx.save();
		ctx.strokeStyle = color;
		ctx.fillStyle = color;
		drawLineArrow(ctx, x1, y1, x2, y2);
		ctx.restore();
	}
}

function drawFilledPolygon (ctx, shape) {
	ctx.beginPath();
	ctx.moveTo(shape[0][0], shape[0][1]);

	for (p in shape) {
		if (p > 0) ctx.lineTo(shape[p][0], shape[p][1]);
	}

	ctx.lineTo(shape[0][0], shape[0][1]);
	ctx.fill();
}

function translateShape (shape, x, y) {
	var rv = [];
	for (p in shape) {
		rv.push([ shape[p][0] + x, shape[p][1] + y ]);
	}
	return rv;
}

function rotateShape (shape, ang) {
	var rv = [];
	for (p in shape) {
		rv.push(rotatePoint(ang,shape[p][0], shape[p][1]));
	}
	return rv;
}

function rotatePoint (ang, x, y) {
	return [
		(x * Math.cos(ang)) - (y * Math.sin(ang)),
		(x * Math.sin(ang)) + (y * Math.cos(ang))
	];
}

},{}],6:[function(require,module,exports){
var domready = require('domready');
var raf = require('raf');
var Victor = require('./victor');
var makeDrawArrow = require('./canvas-arrow');
var colors = require('./nicecolors');

exports = module.exports = animation;

function animation (el) {
	var canvas;
	var ctx;
	var canvasTopLeft;
	var canvasBottomRight;

	var padding = new Victor(20, 20);

	var mouse = new Victor(50, 50);

	canvas = document.createElement('canvas');
	ctx = canvas.getContext('2d');

	var drawArrow = makeDrawArrow(ctx);

	domready(function () {
		el.appendChild(canvas);
		reset();

		window.addEventListener('resize', reset);

		canvas.addEventListener('mousemove', function (ev) {
			var rect = canvas.getBoundingClientRect();
			mouse.x = ev.clientX - rect.left - padding.x;
			mouse.y = canvasBottomRight.y - (ev.clientY - rect.top) - padding.y;
			raf(draw);
		});
	});

	function reset () {
		var style = window.getComputedStyle(el, null);
		var width = parseInt(style.getPropertyValue('width'), 10);
		var paddingLeft = parseInt(style.getPropertyValue('padding-left'), 10);
		var paddingRight = parseInt(style.getPropertyValue('padding-right'), 10);

		var height = 260;
		width -= paddingLeft + paddingRight;

		canvasTopLeft = new Victor(0, 0);
		canvasBottomRight = new Victor(width, height);

		canvas.width = canvasBottomRight.x;
		canvas.height = canvasBottomRight.y;
		canvas.setAttribute('width', canvasBottomRight.x);
		canvas.setAttribute('height', canvasBottomRight.y);

		raf(draw);
	}

	function yy (val) {
		return canvasBottomRight.y - val - padding.y;
	}

	function xx (val) {
		return val + padding.x;
	}

	function drawVector (vector, color) {
		drawArrow(xx(0), yy(0), xx(vector.x), yy(vector.y), color);
	}

	function drawYAxis () {
		var length = Math.round((canvasBottomRight.y - (padding.y * 2)) / 20) * 20;

		ctx.beginPath();
		ctx.moveTo(xx(0), yy(padding.y / 2 * -1));
		ctx.lineTo(xx(0), yy(length));

		for (i = 0; i < length; i += 20) {
			ctx.moveTo(xx(-3), yy(i));
			ctx.lineTo(xx(3), yy(i));
		}

		ctx.strokeStyle = colors.white;
		ctx.stroke();
	}

	function drawXAxis () {
		var i;
		var length = Math.round((canvasBottomRight.x - (padding.x * 2)) / 20) * 20;

		ctx.beginPath();
		ctx.moveTo(xx(padding.x / 2 * -1), yy(0));
		ctx.lineTo(xx(length), yy(0));

		for (i = 0; i < length; i += 20) {
			ctx.moveTo(xx(i), yy(-3));
			ctx.lineTo(xx(i), yy(3));
		}

		ctx.strokeStyle = colors.white;
		ctx.stroke();
	}

	function draw () {
		ctx.font = '12px sans-serif';
		ctx.fillStyle = colors.background;
		ctx.fillRect(0, 0, canvasBottomRight.x, canvasBottomRight.y);

		drawXAxis();
		drawYAxis();

		var vA = new Victor(100, 20);
		var vB = vA.clone().add(mouse);

		drawVector(vA, colors.blue);
		drawVector(mouse, colors.purple);
		drawVector(vB, colors.orange);

		ctx.fillStyle = colors.blue;
		ctx.fillText('A = x: 100, y: 20', padding.y, padding.x / 2);

		ctx.fillStyle = colors.purple;
		ctx.fillText('B = mouse', padding.y + 100, padding.x / 2);

		ctx.fillStyle = colors.orange;
		ctx.fillText('C = A.add( mouse ) = x: ' + Math.round(vB.x) + ', y: ' + Math.round(vB.y), padding.y + 170, padding.x / 2);
	}



	function getScrollTop () {
		var body = document.body
		var docElem = document.documentElement
		return window.pageYOffset || docElem.scrollTop || body.scrollTop;
	}







}

},{"./canvas-arrow":5,"./nicecolors":12,"./victor":13,"domready":2,"raf":3}],7:[function(require,module,exports){
var domready = require('domready');
var raf = require('raf');
var Victor = require('./victor');
var makeDrawArrow = require('./canvas-arrow');
var colors = require('./nicecolors');

exports = module.exports = animation;

function animation (el) {
	var canvas;
	var ctx;
	var canvasTopLeft;
	var canvasBottomRight;

	var padding = new Victor(20, 20);

	var mouse = new Victor(200, 0);
	mouse.rotate(Math.PI / 2 / 3);

	canvas = document.createElement('canvas');
	ctx = canvas.getContext('2d');

	var drawArrow = makeDrawArrow(ctx);

	domready(function () {
		el.appendChild(canvas);
		reset();

		window.addEventListener('resize', reset);

		canvas.addEventListener('mousemove', function (ev) {
			var rect = canvas.getBoundingClientRect();
			mouse.x = ev.clientX - rect.left - padding.x;
			mouse.y = canvasBottomRight.y - (ev.clientY - rect.top) - padding.y;
			raf(draw);
		});
	});

	function reset () {
		var style = window.getComputedStyle(el, null);
		var width = parseInt(style.getPropertyValue('width'), 10);
		var paddingLeft = parseInt(style.getPropertyValue('padding-left'), 10);
		var paddingRight = parseInt(style.getPropertyValue('padding-right'), 10);

		var height = 260;
		width -= paddingLeft + paddingRight;

		canvasTopLeft = new Victor(0, 0);
		canvasBottomRight = new Victor(width, height);

		canvas.width = canvasBottomRight.x;
		canvas.height = canvasBottomRight.y;
		canvas.setAttribute('width', canvasBottomRight.x);
		canvas.setAttribute('height', canvasBottomRight.y);

		raf(draw);
	}

	function yy (val) {
		return canvasBottomRight.y - val - padding.y;
	}

	function xx (val) {
		return val + padding.x;
	}

	function drawVector (vector, color) {
		drawArrow(xx(0), yy(0), xx(vector.x), yy(vector.y), color);
	}

	function drawYAxis () {
		var length = Math.round((canvasBottomRight.y - (padding.y * 2)) / 20) * 20;

		ctx.beginPath();
		ctx.moveTo(xx(0), yy(padding.y / 2 * -1));
		ctx.lineTo(xx(0), yy(length));

		for (i = 0; i < length; i += 20) {
			ctx.moveTo(xx(-3), yy(i));
			ctx.lineTo(xx(3), yy(i));
		}

		ctx.strokeStyle = colors.white;
		ctx.stroke();
	}

	function drawXAxis () {
		var i;
		var length = Math.round((canvasBottomRight.x - (padding.x * 2)) / 20) * 20;

		ctx.beginPath();
		ctx.moveTo(xx(padding.x / 2 * -1), yy(0));
		ctx.lineTo(xx(length), yy(0));

		for (i = 0; i < length; i += 20) {
			ctx.moveTo(xx(i), yy(-3));
			ctx.lineTo(xx(i), yy(3));
		}

		ctx.strokeStyle = colors.white;
		ctx.stroke();
	}

	function draw () {
		ctx.font = '13px sans-serif';

		ctx.fillStyle = colors.background;
		ctx.fillRect(0, 0, canvasBottomRight.x, canvasBottomRight.y);

		drawXAxis();
		drawYAxis();

		drawVector(mouse, colors.purple);

		ctx.beginPath();
		ctx.arc(xx(0), yy(0), 120, (Math.PI * 2) - mouse.angle(), 0, false);
		ctx.strokeStyle = colors.pink;
		ctx.stroke();

		ctx.beginPath();
		ctx.arc(xx(0), yy(0), 120, -Math.PI / 2, mouse.verticalAngle() - (Math.PI / 2), false);
		ctx.strokeStyle = colors.green;
		ctx.stroke();

		var vAlphaLabel = new Victor(60, 0);
		vAlphaLabel.rotate(mouse.angle() / 2);
		ctx.fillStyle = colors.pink;
		ctx.fillText('α', xx(vAlphaLabel.x), yy(vAlphaLabel.y));

		var vBetaLabel = new Victor(0, 60);
		vBetaLabel.rotate(mouse.verticalAngle() / 2 * -1);
		ctx.fillStyle = colors.green;
		ctx.fillText('β', xx(vBetaLabel.x), yy(vBetaLabel.y));

		ctx.fillStyle = colors.pink;
		var alphaDeg = Math.round(mouse.angleDeg() * 100) / 100;
		var alphaRad = Math.round(mouse.angle() * 10000) / 10000;
		ctx.fillText('α = horizontal angle = ' + alphaDeg + '° = ' + alphaRad + ' rad', padding.x * 2, padding.y / 2);

		ctx.fillStyle = colors.green;
		var betaDeg = Math.round(mouse.verticalAngleDeg() * 100) / 100;
		var betaRad = Math.round(mouse.verticalAngle() * 10000) / 10000;
		ctx.fillText('β = vertical angle = ' + betaDeg + '° = ' + betaRad + ' rad', padding.x * 2, (padding.y / 2) + 15);
	}



	function getScrollTop () {
		var body = document.body
		var docElem = document.documentElement
		return window.pageYOffset || docElem.scrollTop || body.scrollTop;
	}







}

},{"./canvas-arrow":5,"./nicecolors":12,"./victor":13,"domready":2,"raf":3}],8:[function(require,module,exports){
var domready = require('domready');
var raf = require('raf');
var Victor = require('./victor');
var colors = require('./nicecolors');

exports = module.exports = animation;

function animation (el) {
	var canvas;
	var ctx;
	var canvasTopLeft;
	var canvasBottomRight;

	var padding = new Victor(20, 20);

	canvas = document.createElement('canvas');
	ctx = canvas.getContext('2d');

	domready(function () {
		el.appendChild(canvas);
		reset();

		window.addEventListener('resize', reset);
	});

	function reset () {
		var style = window.getComputedStyle(el, null);
		var width = parseInt(style.getPropertyValue('width'), 10);
		var paddingLeft = parseInt(style.getPropertyValue('padding-left'), 10);
		var paddingRight = parseInt(style.getPropertyValue('padding-right'), 10);

		var height = 260;
		width -= paddingLeft + paddingRight;

		canvasTopLeft = new Victor(0, 0);
		canvasBottomRight = new Victor(width, height);

		canvas.width = canvasBottomRight.x;
		canvas.height = canvasBottomRight.y;
		canvas.setAttribute('width', canvasBottomRight.x);
		canvas.setAttribute('height', canvasBottomRight.y);

		raf(draw);
	}

	function yy (val) {
		return canvasBottomRight.y - val - padding.y;
	}

	function xx (val) {
		return val + padding.x;
	}

	function drawYAxis () {
		var length = Math.round((canvasBottomRight.y - (padding.y * 2)) / 20) * 20;

		ctx.beginPath();
		ctx.moveTo(xx(0), yy(padding.y / 2 * -1));
		ctx.lineTo(xx(0), yy(length));

		for (i = 0; i < length; i += 20) {
			ctx.moveTo(xx(-3), yy(i));
			ctx.lineTo(xx(3), yy(i));
		}

		ctx.strokeStyle = colors.white;
		ctx.stroke();
	}

	function drawXAxis () {
		var i;
		var length = Math.round((canvasBottomRight.x - (padding.x * 2)) / 20) * 20;

		ctx.beginPath();
		ctx.moveTo(xx(padding.x / 2 * -1), yy(0));
		ctx.lineTo(xx(length), yy(0));

		for (i = 0; i < length; i += 20) {
			ctx.moveTo(xx(i), yy(-3));
			ctx.lineTo(xx(i), yy(3));
		}

		ctx.strokeStyle = colors.white;
		ctx.stroke();
	}

	var tl = new Victor(60, 80);
	var br = new Victor(240, 180);

	var rnd = [];

	setInterval(function () {
		var i;
		rnd = [];

		for (i = 0; i < 10; i++) {
			rnd.push(new Victor().randomize(tl, br));
		}

		raf(draw);
	}, 1000);

	function draw () {
		ctx.font = '13px sans-serif';

		ctx.fillStyle = colors.background;
		ctx.fillRect(0, 0, canvasBottomRight.x, canvasBottomRight.y);

		drawXAxis();
		drawYAxis();

		ctx.beginPath();
		ctx.rect(xx(tl.x), yy(tl.y), br.x - tl.x, (br.y - tl.y) * -1);
		ctx.strokeStyle = colors.brand;
		ctx.stroke();

		rnd.forEach(function (r) {
			ctx.beginPath();
			ctx.arc(xx(r.x), yy(r.y), 3, 0, Math.PI * 2, false);
			ctx.fillStyle = colors.blue;
			ctx.fill();
		});

		ctx.fillStyle = colors.white;
		ctx.fillText('10 random points within bounding rect', padding.x * 2, padding.y / 2);


		/*
		ctx.beginPath();
		ctx.arc(xx(0), yy(0), 120, (Math.PI * 2) - mouse.angle(), 0, false);
		ctx.strokeStyle = colors.pink;
		ctx.stroke();

		ctx.beginPath();
		ctx.arc(xx(0), yy(0), 120, -Math.PI / 2, mouse.verticalAngle() - (Math.PI / 2), false);
		ctx.strokeStyle = colors.green;
		ctx.stroke();
		*/
	}



	function getScrollTop () {
		var body = document.body
		var docElem = document.documentElement
		return window.pageYOffset || docElem.scrollTop || body.scrollTop;
	}







}

},{"./nicecolors":12,"./victor":13,"domready":2,"raf":3}],9:[function(require,module,exports){
var domready = require('domready');
var raf = require('raf');
var Victor = require('./victor');

exports = module.exports = animation;

function animation (el) {
	var canvas;
	var ctx;
	var canvasTopLeft;
	var canvasBottomRight;

	var ship;
	var sprites = {};

	var gold = [];

	canvas = document.createElement('canvas');
	ctx = canvas.getContext('2d');
	ctx.font = '10px sans-serif';

	domready(function () {
		el.insertBefore(canvas, el.firstChild);
		reset();
		start();

		window.addEventListener('resize', function () {
			reset();
		});

		el.addEventListener('click', function (e) {
			gold.push(new Victor(e.pageX, e.pageY));
		});
	});

	function reset () {
		canvasTopLeft = new Victor(0, 0);
		canvasBottomRight = new Victor(el.offsetWidth, el.offsetHeight - 50);

		canvas.width = canvasBottomRight.x;
		canvas.height = canvasBottomRight.y;

		ship = new Ship(ctx);
		ship.position.randomize(canvasTopLeft, canvasBottomRight);
	}

	function loadImages (images, callback) {
		var name;
		var totalImages = Object.keys(images).length;
		var loadedImages = 0;

		function onload () {
			loadedImages++;
			if (loadedImages >= totalImages) {
				callback(null, images);
			}
		}

		for (name in images) {
			var image = new Image();
			image.onload = onload;
			image.src = images[name];

			sprites[name] = image;
		}
	}

	function canvasDistances (vec) {
		return {
			top: vec.distanceY(canvasTopLeft),
			left: vec.distanceX(canvasTopLeft),
			right: canvasBottomRight.distanceX(vec),
			bottom: canvasBottomRight.distanceY(vec)
		};
	}

	function Ship (ctx) {
		this.width = 20;
		this.height = 20;
		this.position = new Victor();
		this.velocity = new Victor(1, 1);
		this.target = new Victor(400, 200);

		this.happyTime = 2000;
		this.happy = 0;
		this.stressed = false;

		this.selectTarget = function () {
			if (!gold.length) {
				this.target.randomizeAny(canvasTopLeft, canvasBottomRight);
				return;
			}

			this.target.copy(gold[0]);
		};

		this.move = function () {
			var bottomDistance = canvasBottomRight.distanceY(this.position);

			var acceleration = new Victor(this.target.distanceX(this.position) / 200, this.target.distanceY(this.position) / 200);

			this.velocity
				.add(acceleration)
				.limit(3, 0.6);

			this.position.add(this.velocity);

			if (gold.length) {
				var goldDistance = this.position.distance(gold[0]);
				if (goldDistance < 50) {
					this.velocity.multiply(0.8);
				}

				if (goldDistance < 5) {
					gold.shift();
					this.selectTarget();
					this.happy = +Date.now();
				}
			}

			var distances = canvasDistances(this.position);
			var horizontalTreshold = canvasBottomRight.x / 5;
			var verticalTreshold = canvasBottomRight.y / 5;

			this.stressed = (
				   distances.top < verticalTreshold
				|| distances.bottom < verticalTreshold 
				|| distances.left < horizontalTreshold 
				|| distances.right < horizontalTreshold );
		};

		this.draw = function () {
			var spritePosition = this.position
				.clone()
				.subtract(new Victor(this.width / 2, this.height / 2));

			var sprite = (+Date.now() - this.happy < this.happyTime) ? sprites.shipActive : sprites.ship;

			ctx.save();
			ctx.translate(this.position.x, this.position.y);
			ctx.rotate(this.velocity.angle());
			ctx.translate(this.width / 2 * -1, this.height / 2 * -1);
			ctx.drawImage(sprite, 0, 0);
			ctx.restore();
		};

		setInterval(this.selectTarget.bind(this), 1000);
	}


	function start () {
		loadImages({
			ship: '../../assets/ship.png',
			shipActive: '../../assets/ship-active.png'
		}, function () {
			loop();
		});
	}

	function loop () {
		draw();
		move();
		raf(loop);
	}

	function move () {
		ship.move();
	}

	function draw () {
		ctx.clearRect(0, 0, canvasBottomRight.x, canvasBottomRight.y);
	//	ctx.fillRect(0, 0, canvasBottomRight.x, canvasBottomRight.y);
	//	ctx.clearRect(ship.position.x - ship.width, ship.position.y - ship.height, ship.width * 2, ship.height * 2);


		var i, len;
		ctx.save();
		for (i = 0, len = gold.length; i < len; i++) {
			ctx.beginPath();
			ctx.arc(gold[i].x, gold[i].y, 3, 0, 2 * Math.PI, false);
			ctx.shadowBlur = 5;
			ctx.shadowColor = '#ccff00';
			ctx.fillStyle = '#ffee6c';
			ctx.fill();
		}
		ctx.restore();


		ship.draw();
	}

	function random (min, max) {
		return Math.floor(Math.random() * (max - min + 1) + min);
	}
}

},{"./victor":13,"domready":2,"raf":3}],10:[function(require,module,exports){
var domready = require('domready');

exports = module.exports = johnson;

function johnson (el) {
	var style;
	var height = 0;
	var windowHeight = 0;
	var lastScrollTop = 0;

	var originalOffset = 0;

	var isStuckTop = false;
	var isStuckBottom = false;

	var bigMode = false;

	domready(initialize);

	function initialize () {
		lastScrollTop = getScrollTop();
		recalculate();

		if (bigMode && !isOriginBelowTopEdge()) {
			stickToTop()
		}

		window.addEventListener('resize', recalculate);
	}

	function recalculate () {
		windowHeight = window.innerHeight;
		style = window.getComputedStyle(el);
		height = parseInt(style.getPropertyValue('height'));

		originalOffset = getOffsetTop(el.parentElement);

		bigMode = isBig();
	}

	function onScroll (e) {
		var scrollTop = getScrollTop();
		var direction = (scrollTop > lastScrollTop) ? 'down' : 'up';
		lastScrollTop = scrollTop;

		if (!bigMode && isTopAboveTopEdge()) {
			stickToTop();
		}

		if (!bigMode && isStuckTop && isOriginBelowTopEdge()) {
			restore();
		}

		if (bigMode && direction === 'down' && isBottomAboveBottomEdge()) {
			unabsolutize();
			stickToBottom();
		}

		if (bigMode && direction === 'up' && !isTopAboveTopEdge()) {
			unabsolutize();
			stickToTop();
		}

		if (bigMode && direction === 'down' && isStuckTop) {
			absolutize();
			unstickFromTop();
		}

		if (bigMode && direction === 'up' && isStuckBottom) {
			absolutize();
			unstickFromBottom();
		}

		if (bigMode && direction === 'up' && isStuckTop && isOriginBelowTopEdge()) {
			restore();
		}
	}

	function stickToTop () {
		isStuckTop = true;
		el.classList.add('stick-top');
	}

	function stickToBottom () {
		isStuckBottom = true;
		el.classList.add('stick-bottom');
	}

	function unstickFromBottom () {
		isStuckBottom = false;
		el.classList.remove('stick-bottom');
	}

	function unstickFromTop () {
		isStuckTop = false;
		el.classList.remove('stick-top');
	}

	function absolutize () {
		el.classList.add('absolute');
		el.style.marginTop = (getScrollTop() + getOffsets().top - originalOffset ) + 'px';
	}

	function unabsolutize () {
		el.classList.remove('absolute');
		el.style.marginTop = '0';
	}

	function restore () {
		unabsolutize();
		unstickFromTop();
		unstickFromBottom();
	}

	function isBig () {
		return (height > windowHeight);
	}

	function isTopAboveTopEdge () {
		return (getOffsets().top < 0);
	}

	function isBottomAboveBottomEdge () {
		return ((getOffsets().bottom - windowHeight) <= 0);
	}

	function isOriginBelowTopEdge () {
		return (getScrollTop() <= originalOffset);
	}

	function getOffsets () {
		return el.getBoundingClientRect();
	}

	function getOffsetTop (el) {
		var box = el.getBoundingClientRect()
		var scrollTop = getScrollTop();
		var clientTop = getClientTop();
		
		var top  = box.top +  scrollTop - clientTop
		
		return Math.round(top);
	}

	function getClientTop () {
		var body = document.body
		var docElem = document.documentElement
		return docElem.clientTop || body.clientTop || 0;
	}

	function getScrollTop () {
		var body = document.body
		var docElem = document.documentElement
		return window.pageYOffset || docElem.scrollTop || body.scrollTop;
	}

	window.addEventListener('scroll', onScroll);
}

},{"domready":2}],11:[function(require,module,exports){
require('./header-animation')(document.querySelector('.header-wrapper'));

require('./johnson')(document.querySelector('.sidebar'));

require('./demo-add')(document.querySelector('.demo-add'));
require('./demo-angle')(document.querySelector('.demo-angle'));
require('./demo-randomize')(document.querySelector('.demo-randomize'));

},{"./demo-add":6,"./demo-angle":7,"./demo-randomize":8,"./header-animation":9,"./johnson":10}],12:[function(require,module,exports){
exports.background = '#202224';
exports.white = '#f8f8f2';
exports.pink = '#f92672';
exports.purple = '#ae81ff';
exports.green = '#a6e22e';
exports.yellow = '#e6db74';
exports.blue = '#66d9ef';
exports.orange = '#fd971f';
exports.brand = '#e06a60';
exports.victor = '#d83e31';

},{}],13:[function(require,module,exports){

},{}]},{},[11])