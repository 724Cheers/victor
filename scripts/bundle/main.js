(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],2:[function(require,module,exports){
/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function (name, definition) {

  if (typeof module != 'undefined') module.exports = definition()
  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)
  else this[name] = definition()

}('domready', function () {

  var fns = [], listener
    , doc = document
    , domContentLoaded = 'DOMContentLoaded'
    , loaded = /^loaded|^i|^c/.test(doc.readyState)

  if (!loaded)
  doc.addEventListener(domContentLoaded, listener = function () {
    doc.removeEventListener(domContentLoaded, listener)
    loaded = 1
    while (listener = fns.shift()) listener()
  })

  return function (fn) {
    loaded ? fn() : fns.push(fn)
  }

});

},{}],3:[function(require,module,exports){
var now = require('performance-now')
  , global = typeof window === 'undefined' ? {} : window
  , vendors = ['ms', 'moz', 'webkit', 'o']
  , suffix = 'AnimationFrame'
  , raf = global['request' + suffix]
  , caf = global['cancel' + suffix] || global['cancelRequest' + suffix]

for(var i = 0; i < vendors.length && !raf; i++) {
  raf = global[vendors[i] + 'Request' + suffix]
  caf = global[vendors[i] + 'Cancel' + suffix]
      || global[vendors[i] + 'CancelRequest' + suffix]
}

if(!raf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for (var i = 0; i < cp.length; i++) {
          if (!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {}
          }
        }
      }, next)
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function() {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.apply(global, arguments)
}
module.exports.cancel = function() {
  caf.apply(global, arguments)
}

},{"performance-now":4}],4:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.6.3
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

/*
//@ sourceMappingURL=performance-now.map
*/

}).call(this,require("FWaASH"))
},{"FWaASH":1}],5:[function(require,module,exports){
var domready = require('domready');
var raf = require('raf');
var Victor = require('./victor');

exports = module.exports = animation;

function animation (el) {
	var canvas;
	var ctx;
	var canvasTopLeft;
	var canvasBottomRight;

	var ship;
	var sprites = {};

	var gold = [];

	canvas = document.createElement('canvas');
	ctx = canvas.getContext('2d');
	ctx.font = '10px sans-serif';

	domready(function () {
		el.insertBefore(canvas, el.firstChild);
		reset();
		start();

		window.addEventListener('resize', function () {
			reset();
		});

		el.addEventListener('click', function (e) {
			gold.push(new Victor(e.pageX, e.pageY));
		});
	});

	function reset () {
		canvasTopLeft = new Victor(0, 0);
		canvasBottomRight = new Victor(el.offsetWidth, el.offsetHeight - 50);

		canvas.width = canvasBottomRight.x;
		canvas.height = canvasBottomRight.y;

		ship = new Ship(ctx);
		ship.position.randomize(canvasTopLeft, canvasBottomRight);
	}

	function loadImages (images, callback) {
		var name;
		var totalImages = Object.keys(images).length;
		var loadedImages = 0;

		function onload () {
			loadedImages++;
			if (loadedImages >= totalImages) {
				callback(null, images);
			}
		}

		for (name in images) {
			var image = new Image();
			image.onload = onload;
			image.src = images[name];

			sprites[name] = image;
		}
	}

	function canvasDistances (vec) {
		return {
			top: vec.distanceY(canvasTopLeft),
			left: vec.distanceX(canvasTopLeft),
			right: canvasBottomRight.distanceX(vec),
			bottom: canvasBottomRight.distanceY(vec)
		};
	}

	function Ship (ctx) {
		this.width = 20;
		this.height = 20;
		this.position = new Victor();
		this.velocity = new Victor(1, 1);
		this.target = new Victor(400, 200);

		this.happyTime = 2000;
		this.happy = 0;
		this.stressed = false;

		this.selectTarget = function () {
			if (!gold.length) {
				this.target.randomizeAny(canvasTopLeft, canvasBottomRight);
				return;
			}

			this.target.copy(gold[0]);
		};

		this.move = function () {
			var bottomDistance = canvasBottomRight.distanceY(this.position);

			var acceleration = new Victor(this.target.distanceX(this.position) / 200, this.target.distanceY(this.position) / 200);

			this.velocity
				.add(acceleration)
				.limit(3, 0.6);

			this.position.add(this.velocity);

			if (gold.length) {
				var goldDistance = this.position.distance(gold[0]);
				if (goldDistance < 50) {
					this.velocity.multiply(0.8);
				}

				if (goldDistance < 5) {
					gold.shift();
					this.selectTarget();
					this.happy = +Date.now();
				}
			}

			var distances = canvasDistances(this.position);
			var horizontalTreshold = canvasBottomRight.x / 5;
			var verticalTreshold = canvasBottomRight.y / 5;

			this.stressed = (
				   distances.top < verticalTreshold
				|| distances.bottom < verticalTreshold 
				|| distances.left < horizontalTreshold 
				|| distances.right < horizontalTreshold );
		};

		this.draw = function () {
			var spritePosition = this.position
				.clone()
				.subtract(new Victor(this.width / 2, this.height / 2));

			var sprite = (+Date.now() - this.happy < this.happyTime) ? sprites.shipActive : sprites.ship;

			ctx.save();
			ctx.translate(this.position.x, this.position.y);
			ctx.rotate(this.velocity.angle());
			ctx.translate(this.width / 2 * -1, this.height / 2 * -1);
			ctx.drawImage(sprite, 0, 0);
			ctx.restore();
		};

		setInterval(this.selectTarget.bind(this), 1000);
	}


	function start () {
		loadImages({
			ship: '../../assets/ship.png',
			shipActive: '../../assets/ship-active.png'
		}, function () {
			loop();
		});
	}

	function loop () {
		draw();
		move();
		raf(loop);
	}

	function move () {
		ship.move();
	}

	function draw () {
		ctx.clearRect(0, 0, canvasBottomRight.x, canvasBottomRight.y);
	//	ctx.fillRect(0, 0, canvasBottomRight.x, canvasBottomRight.y);
	//	ctx.clearRect(ship.position.x - ship.width, ship.position.y - ship.height, ship.width * 2, ship.height * 2);


		var i, len;
		ctx.save();
		for (i = 0, len = gold.length; i < len; i++) {
			ctx.beginPath();
			ctx.arc(gold[i].x, gold[i].y, 3, 0, 2 * Math.PI, false);
			ctx.shadowBlur = 5;
			ctx.shadowColor = '#ccff00';
			ctx.fillStyle = '#ffee6c';
			ctx.fill();
		}
		ctx.restore();


		ship.draw();
	}

	function random (min, max) {
		return Math.floor(Math.random() * (max - min + 1) + min);
	}
}

},{"./victor":8,"domready":2,"raf":3}],6:[function(require,module,exports){
exports = module.exports = johnson;

function johnson (el) {
	var style;
	var height = 0;
	var windowHeight = 0;
	var lastScrollTop = 0;

	var originalOffset = 0;

	var isStuckTop = false;
	var isStuckBottom = false;

	var bigMode = false;

	initialize();

	function initialize () {
		lastScrollTop = getScrollTop();
		recalculate();

		window.addEventListener('resize', recalculate);
	}

	function recalculate () {
		windowHeight = window.innerHeight;
		style = window.getComputedStyle(el);
		height = parseInt(style.getPropertyValue('height'));

		originalOffset = getOffsets().top;

		bigMode = isBig();
	}

	function onScroll (e) {
		var scrollTop = getScrollTop();
		var direction = (scrollTop > lastScrollTop) ? 'down' : 'up';
		lastScrollTop = scrollTop;

		if (!bigMode && isTopAboveTopEdge()) {
			stickToTop();
		}

		if (!bigMode && isStuckTop && isOriginBelowTopEdge()) {
			restore();
		}

		if (bigMode && direction === 'down' && isBottomAboveBottomEdge()) {
			unabsolutize();
			stickToBottom();
		}

		if (bigMode && direction === 'up' && !isTopAboveTopEdge()) {
			unabsolutize();
			stickToTop();
		}

		if (bigMode && direction === 'down' && isStuckTop) {
			absolutize();
			unstickFromTop();
		}

		if (bigMode && direction === 'up' && isStuckBottom) {
			absolutize();
			unstickFromBottom();
		}

		if (bigMode && direction === 'up' && isStuckTop && isOriginBelowTopEdge()) {
			restore();
		}
	}

	function stickToTop () {
		isStuckTop = true;
		el.classList.add('stick-top');
	}

	function stickToBottom () {
		isStuckBottom = true;
		el.classList.add('stick-bottom');
	}

	function unstickFromBottom () {
		isStuckBottom = false;
		el.classList.remove('stick-bottom');
	}

	function unstickFromTop () {
		isStuckTop = false;
		el.classList.remove('stick-top');
	}

	function absolutize () {
		el.classList.add('absolute');
		el.style.marginTop = (getScrollTop() + getOffsets().top - originalOffset ) + 'px';
	}

	function unabsolutize () {
		el.classList.remove('absolute');
		el.style.marginTop = '0';
	}

	function restore () {
		isStuckTop = false;
		el.classList.remove('stick-top');
	}

	function isBig () {
		return (height > windowHeight);
	}

	function isTopAboveTopEdge () {
		return (getOffsets().top < 0);
	}

	function isBottomAboveBottomEdge () {
		return ((getOffsets().bottom - windowHeight) <= 0);
	}

	function isOriginBelowTopEdge () {
		return (getScrollTop() <= originalOffset);
	}

	function getOffsets () {
		return el.getBoundingClientRect();
	};

	function getScrollTop(){
		if (typeof pageYOffset!= 'undefined') {
			//most browsers except IE before #9
			return pageYOffset;

		} else {
			var B= document.body; //IE 'quirks'
			var D= document.documentElement; //IE with doctype
			D= (D.clientHeight)? D: B;
			return D.scrollTop;
		}
	}

	window.addEventListener('scroll', onScroll);
}

},{}],7:[function(require,module,exports){
require('./header-animation')(document.querySelector('.header-wrapper'));

require('./johnson')(document.querySelector('.sidebar'));

},{"./header-animation":5,"./johnson":6}],8:[function(require,module,exports){
exports = module.exports = Victor;

/**
 * # Victor - A JavaScript 2D vector class with methods for common vector operations
 */

/**
 * Constructor. Will also work without the `new` keyword
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = Victor(42, 1337);
 *
 * @param {Number} x Value of the x axis
 * @param {Number} y Value of the y axis
 * @return {Victor}
 * @api public
 */
function Victor (x, y) {
	if (!(this instanceof Victor)) {
		return new Victor(x, y);
	}
	this.x = x || 0;
	this.y = y || 0;
};

/**
 * # Properties
 */

/**
 * The X axis
 *
 * ### Examples:
 *     var vec = new Victor.fromArray(42, 21);
 *
 *     vec.x;
 *     // => 42
 *
 * @api public
 */
Victor.prototype.x = 0;

/**
 * The Y axis
 *
 * ### Examples:
 *     var vec = new Victor.fromArray(42, 21);
 *
 *     vec.y;
 *     // => 21
 *
 * @api public
 */
Victor.prototype.y = 0;

/**
 * # Static
 */

/**
 * Creates a new instance from an array
 *
 * ### Examples:
 *     var vec = Victor.fromArray([42, 21]);
 *
 *     vec.toString();
 *     // => x:42, y:21
 *
 * @name Victor.fromArray
 * @param {Array} array Array with the x and y values at index 0 and 1 respectively
 * @return {Victor} The new instance
 * @api public
 */
Victor.fromArray = function (arr) {
	return new Victor(arr[0] || 0, arr[1] || 0);
};

/**
 * Creates a new instance from an object
 *
 * ### Examples:
 *     var vec = Victor.fromObject({ x: 42, y: 21 });
 *
 *     vec.toString();
 *     // => x:42, y:21
 *
 * @name Victor.fromObject
 * @param {Object} obj Object with the values for x and y
 * @return {Victor} The new instance
 * @api public
 */
Victor.fromObject = function (obj) {
	return new Victor(obj.x || 0, obj.y || 0);
};

Victor.add = function (vecA, vecB) {
	return new Victor(vecA.x + vecB.x, vecA.y + vecB.y);
};

Victor.subtract = function (vecA, vecB) {
	return new Victor(vecA.x - vecB.x, vecA.y - vecB.y);
};

Victor.multiply = function (vec, scalar) {
	return new Victor(vec.x * scalar, vec.y * scalar);
};

Victor.divide = function (vec, scalar) {
	return new Victor(vec.x / scalar, vec.y / scalar);
};

Victor.mix = function (vecA, vecB, amount) {
	amount = amount || 0.5
	var x = (1 - amount) * vecA.x + amount * vecB.x;
	var y = (1 - amount) * vecA.y + amount * vecB.y;
	return new Victor(x, y);
};

Victor.random = function (maxX, maxY) {
	var x = Math.floor(Math.random() * maxX),
		y = Math.floor(Math.random() * maxY);

	return new Victor(x, y);
};

/**
 * # Manipulation
 *
 * These functions are chainable.
 */

/**
 * Adds another vector's X axis to this one
 *
 * ### Examples:
 *     var vec1 = new Victor(10, 10);
 *     var vec2 = new Victor(20, 30);
 *
 *     vec1.addX(vec2);
 *     vec1.toString();
 *     // => x:30, y:10
 *
 * @param {Victor} vector The other vector you want to add to this one
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.addX = function (vec) {
	this.x += vec.x;
	return this;
};

/**
 * Adds another vector's Y axis to this one
 *
 * ### Examples:
 *     var vec1 = new Victor(10, 10);
 *     var vec2 = new Victor(20, 30);
 *
 *     vec1.addY(vec2);
 *     vec1.toString();
 *     // => x:10, y:40
 *
 * @param {Victor} vector The other vector you want to add to this one
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.addY = function (vec) {
	this.y += vec.y;
	return this;
};

/**
 * Adds another vector to this one
 *
 * ### Examples:
 *     var vec1 = new Victor(10, 10);
 *     var vec2 = new Victor(20, 30);
 *
 *     vec1.add(vec2);
 *     vec1.toString();
 *     // => x:30, y:40
 *
 * @param {Victor} vector The other vector you want to add to this one
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.add = function (vec) {
	this.addX(vec);
	this.addY(vec);
	return this;
};

/**
 * Subtracts the X axis of another vector from this one
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = new Victor(20, 30);
 *
 *     vec1.subtractX(vec2);
 *     vec1.toString();
 *     // => x:80, y:50
 *
 * @param {Victor} vector The other vector you want subtract from this one
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.subtractX = function (vec) {
	this.x -= vec.x;
	return this;
};

/**
 * Subtracts the Y axis of another vector from this one
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = new Victor(20, 30);
 *
 *     vec1.subtractY(vec2);
 *     vec1.toString();
 *     // => x:100, y:20
 *
 * @param {Victor} vector The other vector you want subtract from this one
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.subtractY = function (vec) {
	this.y -= vec.y;
	return this;
};

/**
 * Subtracts another vector from this one
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = new Victor(20, 30);
 *
 *     vec1.subtract(vec2);
 *     vec1.toString();
 *     // => x:80, y:20
 *
 * @param {Victor} vector The other vector you want subtract from this one
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.subtract = function (vec) {
	this.subtractX(vec);
	this.subtractY(vec);
	return this;
};

/**
 * Divides the X axis by a number
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.divideX(2);
 *     vec.toString();
 *     // => x:50, y:50
 *
 * @param {Number} number The number to divide the axis by
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.divideX = function (scalar) {
	this.x /= scalar;
	return this;
};

/**
 * Divides the Y axis by a number
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.divideY(2);
 *     vec.toString();
 *     // => x:100, y:25
 *
 * @param {Number} number The number to divide the axis by
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.divideY = function (scalar) {
	this.y /= scalar;
	return this;
};

/**
 * Divides both vector axis by a number
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.divide(2);
 *     vec.toString();
 *     // => x:50, y:25
 *
 * @param {Number} number The number to divide the axis by
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.divide = function (scalar) {
	this.divideX(scalar);
	this.divideY(scalar);
	return this;
};

/**
 * Multiplies the X axis by a number
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.multiplyX(2);
 *     vec.toString();
 *     // => x:200, y:50
 *
 * @param {Number} number The number to multiply the axis with
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.multiplyX = function (scalar) {
	this.x *= scalar;
	return this;
};

/**
 * Multiplies the Y axis by a number
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.multiplyY(2);
 *     vec.toString();
 *     // => x:100, y:100
 *
 * @param {Number} number The number to multiply the axis with
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.multiplyY = function (scalar) {
	this.y *= scalar;
	return this;
};

/**
 * Multiplies both vector axis by a number
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.multiply(2);
 *     vec.toString();
 *     // => x:200, y:100
 *
 * @param {Number} number The number to multiply the axis with
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.multiply = function (scalar) {
	this.multiplyX(scalar);
	this.multiplyY(scalar);
	return this;
};

/**
 * Normalize
 *
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.normalize = function () {
	if (this.length() === 0) {
		this.x = 1;
		this.y = 0;
	} else {
		this.divide(this.length());
	}
	return this;
};

Victor.prototype.norm = Victor.prototype.normalize;

/**
 * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.limit(80, 0.9);
 *     vec.toString();
 *     // => x:90, y:50
 *
 * @param {Number} max The maximum value for both x and y axis
 * @param {Number} factor Factor by which the axis are to be multiplied with
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.limit = function (max, factor) {
	if (Math.abs(this.x) > max){ this.x *= factor; }
	if (Math.abs(this.y) > max){ this.y *= factor; }
	return this;
};

/**
 * Randomizes both vector axis with a value between 2 vectors
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));
 *     vec.toString();
 *     // => x:67, y:73
 *
 * @param {Victor} topLeft first vector
 * @param {Victor} bottomRight second vector
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.randomize = function (topLeft, bottomRight) {
	this.randomizeX(topLeft, bottomRight);
	this.randomizeY(topLeft, bottomRight);

	return this;
};

/**
 * Randomizes the y axis with a value between 2 vectors
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));
 *     vec.toString();
 *     // => x:55, y:50
 *
 * @param {Victor} topLeft first vector
 * @param {Victor} bottomRight second vector
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.randomizeX = function (topLeft, bottomRight) {
	var min = Math.min(topLeft.x, bottomRight.x);
	var max = Math.max(topLeft.x, bottomRight.x);
	this.x = random(min, max);
	return this;
};

/**
 * Randomizes the y axis with a value between 2 vectors
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));
 *     vec.toString();
 *     // => x:100, y:66
 *
 * @param {Victor} topLeft first vector
 * @param {Victor} bottomRight second vector
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.randomizeY = function (topLeft, bottomRight) {
	var min = Math.min(topLeft.y, bottomRight.y);
	var max = Math.max(topLeft.y, bottomRight.y);
	this.y = random(min, max);
	return this;
};

/**
 * Randomly randomizes either axis between 2 vectors
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));
 *     vec.toString();
 *     // => x:100, y:77
 *
 * @param {Victor} topLeft first vector
 * @param {Victor} bottomRight second vector
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.randomizeAny = function (topLeft, bottomRight) {
	if (!! Math.round(Math.random())) {
		this.randomizeX(topLeft, bottomRight);
	} else {
		this.randomizeY(topLeft, bottomRight);
	}
	return this;
};

/**
 * Rounds both axis to an integer value
 *
 * ### Examples:
 *     var vec = new Victor(100.2, 50.9);
 *
 *     vec.unfloat();
 *     vec.toString();
 *     // => x:100, y:51
 *
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.unfloat = function () {
	this.x = Math.round(this.x);
	this.y = Math.round(this.y);
	return this;
};

/**
 * Performs a linear blend / interpolation of the X axis towards another vector
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 100);
 *     var vec2 = new Victor(200, 200);
 *
 *     vec1.mixX(vec2, 0.5);
 *     vec.toString();
 *     // => x:150, y:100
 *
 * @param {Victor} vector The other vector
 * @param {Number} amount The blend amount (optional, default: 0.5)
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.mixX = function (vec, amount) {
	amount = amount || 0.5;
	this.x = (1 - amount) * this.x + amount * vec.x;
	return this;
};

/**
 * Performs a linear blend / interpolation of the Y axis towards another vector
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 100);
 *     var vec2 = new Victor(200, 200);
 *
 *     vec1.mixY(vec2, 0.5);
 *     vec.toString();
 *     // => x:100, y:150
 *
 * @param {Victor} vector The other vector
 * @param {Number} amount The blend amount (optional, default: 0.5)
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.mixY = function (vec, amount) {
	amount = amount || 0.5;
	this.y = (1 - amount) * this.y + amount * vec.y;
	return this;
};

/**
 * Performs a linear blend / interpolation towards another vector
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 100);
 *     var vec2 = new Victor(200, 200);
 *
 *     vec1.mix(vec2, 0.5);
 *     vec.toString();
 *     // => x:150, y:150
 *
 * @param {Victor} vector The other vector
 * @param {Number} amount The blend amount (optional, default: 0.5)
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.mix = function (vec, amount) {
	amount = amount || 0.5;
	this.mixX(vec, amount);
	this.mixY(vec, amount);
	return this;
};

/**
 * # Products
 */

/**
 * Creates a clone of this vector
 *
 * ### Examples:
 *     var vec1 = new Victor(10, 10);
 *     var vec2 = vec1.clone();
 *
 *     vec2.toString();
 *     // => x:10, y:10
 *
 * @return {Victor} A clone of the vector
 * @api public
 */
Victor.prototype.clone = function () {
	return new Victor(this.x, this.y);
};

/**
 * Copies another vector's X component in to its own
 *
 * ### Examples:
 *     var vec1 = new Victor(10, 10);
 *     var vec2 = new Victor(20, 20);
 *     var vec2 = vec1.copyX(vec1);
 *
 *     vec2.toString();
 *     // => x:20, y:10
 *
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.copyX = function (vec) {
	this.x = vec.x;
	return this;
};

/**
 * Copies another vector's Y component in to its own
 *
 * ### Examples:
 *     var vec1 = new Victor(10, 10);
 *     var vec2 = new Victor(20, 20);
 *     var vec2 = vec1.copyY(vec1);
 *
 *     vec2.toString();
 *     // => x:10, y:20
 *
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.copyY = function (vec) {
	this.y = vec.y;
	return this;
};

/**
 * Copies another vector's X and Y components in to its own
 *
 * ### Examples:
 *     var vec1 = new Victor(10, 10);
 *     var vec2 = new Victor(20, 20);
 *     var vec2 = vec1.copy(vec1);
 *
 *     vec2.toString();
 *     // => x:20, y:20
 *
 * @return {Victor} `this` for chaining capabilities
 * @api public
 */
Victor.prototype.copy = function (vec) {
	this.copyX(vec);
	this.copyY(vec);
	return this;
};

/**
 * Calculates the dot product of this vector and another
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = new Victor(200, 60);
 *
 *     vec1.dot(vec2);
 *     // => 23000
 *
 * @param {Victor} vector The second vector
 * @return {Number} Dot product
 * @api public
 */
Victor.prototype.dot = function (vec2) {
	return this.x * vec2.x + this.y * vec2.y;
};

Victor.prototype.horizontalAngle = function () {
	return Math.atan2(this.y, this.x);
};

Victor.prototype.horizontalAngleDeg = function () {
	return radian2degrees(this.horizontalAngle());
};

Victor.prototype.verticalAngle = function () {
	return Math.atan2(this.x, this.y);
};

Victor.prototype.verticalAngleDeg = function () {
	return radian2degrees(this.verticalAngle());
};

Victor.prototype.angle = Victor.prototype.horizontalAngle;
Victor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;
Victor.prototype.direction = Victor.prototype.horizontalAngle;

Victor.prototype.rotate = function (angle) {
	var nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));
	var ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));

	this.x = nx;
	this.y = ny;
};

Victor.prototype.rotateDeg = function (angle) {
	angle = degrees2radian(angle);
	this.rotate(angle);
};

Victor.prototype.rotateBy = function (rotation) {
	var angle = this.angle() + rotation;

	this.rotate(angle);
};

Victor.prototype.rotateByDeg = function (rotation) {
	rotation = degrees2radian(rotation);
	this.rotateBy(rotation);
};

/**
 * Calculates the distance of the X axis between this vector and another
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = new Victor(200, 60);
 *
 *     vec1.distanceX(vec2);
 *     // => -100
 *
 * @param {Victor} vector The second vector
 * @return {Number} Distance
 * @api public
 */
Victor.prototype.distanceX = function (vec) {
	return this.x - vec.x;
};

/**
 * Same as `distanceX()` but always returns an absolute number
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = new Victor(200, 60);
 *
 *     vec1.absDistanceX(vec2);
 *     // => 100
 *
 * @param {Victor} vector The second vector
 * @return {Number} Absolute distance
 * @api public
 */
Victor.prototype.absDistanceX = function (vec) {
	return Math.abs(this.distanceX(vec));
};

/**
 * Calculates the distance of the Y axis between this vector and another
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = new Victor(200, 60);
 *
 *     vec1.distanceY(vec2);
 *     // => -10
 *
 * @param {Victor} vector The second vector
 * @return {Number} Distance
 * @api public
 */
Victor.prototype.distanceY = function (vec) {
	return this.y - vec.y;
};

/**
 * Same as `distanceY()` but always returns an absolute number
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = new Victor(200, 60);
 *
 *     vec1.distanceY(vec2);
 *     // => 10
 *
 * @param {Victor} vector The second vector
 * @return {Number} Absolute distance
 * @api public
 */
Victor.prototype.absDistanceY = function (vec) {
	return Math.abs(this.distanceY(vec));
};

/**
 * Calculates the euclidean distance between this vector and another
 *
 * ### Examples:
 *     var vec1 = new Victor(100, 50);
 *     var vec2 = new Victor(200, 60);
 *
 *     vec1.distance(vec2);
 *     // => 100.4987562112089
 *
 * @param {Victor} vector The second vector
 * @return {Number} Distance
 * @api public
 */
Victor.prototype.distance = function (vec) {
	var dx = this.distanceX(vec),
		dy = this.distanceY(vec);

	return Math.sqrt(dx * dx + dy * dy);
};

/**
 * Calculates the length or magnitude of the vector
 *
 * ### Examples:
 *     var vec = new Victor(100, 50);
 *
 *     vec.length();
 *     // => 111.80339887498948
 *
 * @return {Number} Length / Magnitude
 * @api public
 */
Victor.prototype.length = function () {
	return Math.sqrt(this.x * this.x + this.y * this.y);
};

Victor.prototype.magnitude = Victor.prototype.length;

/**
 * # Utility Methods
 */

/**
 * Returns an string representation of the vector
 *
 * ### Examples:
 *     var vec = new Victor(10, 20);
 *
 *     vec.toString();
 *     // => x:10, y:20
 *
 * @return {String}
 * @api public
 */
Victor.prototype.toString = function () {
	return 'x:' + this.x + ', y:' + this.y;
};

/**
 * Returns an array representation of the vector
 *
 * ### Examples:
 *     var vec = new Victor(10, 20);
 *
 *     vec.toArray();
 *     // => [10, 20]
 *
 * @return {Array}
 * @api public
 */
Victor.prototype.toArray = function () {
	return [ this.x, this.y ];
};

/**
 * Returns an object representation of the vector
 *
 * ### Examples:
 *     var vec = new Victor(10, 20);
 *
 *     vec.toObject();
 *     // => { x: 10, y: 20 }
 *
 * @return {Object}
 * @api public
 */
Victor.prototype.toObject = function () {
	return { x: this.x, y: this.y };
};


var degrees = 180 / Math.PI;

function random (min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}

function radian2degrees (rad) {
	return rad * degrees;
}

function degrees2radian (deg) {
	return deg / degrees;
}

},{}]},{},[7])