{"name":"Victor","tagline":"A JavaScript 2D vector class with methods for common vector operations","body":"# Victor - A JavaScript 2D vector class with methods for common vector operations\r\n\r\n## Victor(x, y)\r\n\r\nConstructor. Will also work without the `new` keyword\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = Victor(42, 1337);\r\n\r\n### Params: \r\n\r\n* **Number** *x* Value of the x axis\r\n* **Number** *y* Value of the y axis\r\n\r\n### Return:\r\n\r\n* **Victor** \r\n\r\n# Properties\r\n\r\n## x\r\n\r\nThe X axis\r\n\r\n### Examples:\r\n    var vec = new Victor.fromArray(42, 21);\r\n\r\n    vec.x;\r\n    // => 42\r\n\r\n## y\r\n\r\nThe Y axis\r\n\r\n### Examples:\r\n    var vec = new Victor.fromArray(42, 21);\r\n\r\n    vec.y;\r\n    // => 21\r\n\r\n# Static\r\n\r\n## Victor.fromArray(array)\r\n\r\nCreates a new instance from an array\r\n\r\n### Examples:\r\n    var vec = Victor.fromArray([42, 21]);\r\n\r\n    vec.toString();\r\n    // => x:42, y:21\r\n\r\n### Params: \r\n\r\n* **Array** *array* Array with the x and y values at index 0 and 1 respectively\r\n\r\n### Return:\r\n\r\n* **Victor** The new instance\r\n\r\n## Victor.fromObject(obj)\r\n\r\nCreates a new instance from an object\r\n\r\n### Examples:\r\n    var vec = Victor.fromObject({ x: 42, y: 21 });\r\n\r\n    vec.toString();\r\n    // => x:42, y:21\r\n\r\n### Params: \r\n\r\n* **Object** *obj* Object with the values for x and y\r\n\r\n### Return:\r\n\r\n* **Victor** The new instance\r\n\r\n# Manipulation\r\n\r\nThese functions are chainable.\r\n\r\n## addX(vector)\r\n\r\nAdds another vector's X axis to this one\r\n\r\n### Examples:\r\n    var vec1 = new Victor(10, 10);\r\n    var vec2 = new Victor(20, 30);\r\n\r\n    vec1.addX(vec2);\r\n    vec1.toString();\r\n    // => x:30, y:10\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The other vector you want to add to this one\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## addY(vector)\r\n\r\nAdds another vector's Y axis to this one\r\n\r\n### Examples:\r\n    var vec1 = new Victor(10, 10);\r\n    var vec2 = new Victor(20, 30);\r\n\r\n    vec1.addY(vec2);\r\n    vec1.toString();\r\n    // => x:10, y:40\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The other vector you want to add to this one\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## add(vector)\r\n\r\nAdds another vector to this one\r\n\r\n### Examples:\r\n    var vec1 = new Victor(10, 10);\r\n    var vec2 = new Victor(20, 30);\r\n\r\n    vec1.add(vec2);\r\n    vec1.toString();\r\n    // => x:30, y:40\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The other vector you want to add to this one\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## subtractX(vector)\r\n\r\nSubtracts the X axis of another vector from this one\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = new Victor(20, 30);\r\n\r\n    vec1.subtractX(vec2);\r\n    vec1.toString();\r\n    // => x:80, y:50\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The other vector you want subtract from this one\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## subtractY(vector)\r\n\r\nSubtracts the Y axis of another vector from this one\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = new Victor(20, 30);\r\n\r\n    vec1.subtractY(vec2);\r\n    vec1.toString();\r\n    // => x:100, y:20\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The other vector you want subtract from this one\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## subtract(vector)\r\n\r\nSubtracts another vector from this one\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = new Victor(20, 30);\r\n\r\n    vec1.subtract(vec2);\r\n    vec1.toString();\r\n    // => x:80, y:20\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The other vector you want subtract from this one\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## divideX(number)\r\n\r\nDivides the X axis by a number\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.divideX(2);\r\n    vec.toString();\r\n    // => x:50, y:50\r\n\r\n### Params: \r\n\r\n* **Number** *number* The number to divide the axis by\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## divideY(number)\r\n\r\nDivides the Y axis by a number\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.divideY(2);\r\n    vec.toString();\r\n    // => x:100, y:25\r\n\r\n### Params: \r\n\r\n* **Number** *number* The number to divide the axis by\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## divide(number)\r\n\r\nDivides both vector axis by a number\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.divide(2);\r\n    vec.toString();\r\n    // => x:50, y:25\r\n\r\n### Params: \r\n\r\n* **Number** *number* The number to divide the axis by\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## multiplyX(number)\r\n\r\nMultiplies the X axis by a number\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.multiplyX(2);\r\n    vec.toString();\r\n    // => x:200, y:50\r\n\r\n### Params: \r\n\r\n* **Number** *number* The number to multiply the axis with\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## multiplyY(number)\r\n\r\nMultiplies the Y axis by a number\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.multiplyY(2);\r\n    vec.toString();\r\n    // => x:100, y:100\r\n\r\n### Params: \r\n\r\n* **Number** *number* The number to multiply the axis with\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## multiply(number)\r\n\r\nMultiplies both vector axis by a number\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.multiply(2);\r\n    vec.toString();\r\n    // => x:200, y:100\r\n\r\n### Params: \r\n\r\n* **Number** *number* The number to multiply the axis with\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## norm()\r\n\r\nNorm\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## limit(max, factor)\r\n\r\nIf the absolute vector axis is greater than `max`, multiplies the axis by `factor`\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.limit(80, 0.9);\r\n    vec.toString();\r\n    // => x:90, y:50\r\n\r\n### Params: \r\n\r\n* **Number** *max* The maximum value for both x and y axis\r\n* **Number** *factor* Factor by which the axis are to be multiplied with\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## randomize(maxX, maxY)\r\n\r\nRandomizes both vector axis\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.randomize(200, 100);\r\n    vec.toString();\r\n    // => x:177, y:61\r\n\r\n### Params: \r\n\r\n* **Number** *maxX* Maximum value for the x axis\r\n* **Number** *maxY* Maximum value for the y axis\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## randomizeX(max)\r\n\r\nRandomizes the x axis\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.randomizeX(100);\r\n    vec.toString();\r\n    // => x:76, y:50\r\n\r\n### Params: \r\n\r\n* **Number** *max* Maximum value for the x axis\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## randomizeY(max)\r\n\r\nRandomizes the y axis\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.randomizeY(100);\r\n    vec.toString();\r\n    // => x:100, y:66\r\n\r\n### Params: \r\n\r\n* **Number** *max* Maximum value for the y axis\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## randomizeAny(maxX, maxY)\r\n\r\nRandomly randomizes either axis\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.randomizeAny(200, 100);\r\n    vec.toString();\r\n    // => x:100, y:54\r\n\r\n### Params: \r\n\r\n* **Number** *maxX* Maximum value for the x axis\r\n* **Number** *maxY* Maximum value for the y axis\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## unfloat()\r\n\r\nRounds both axis to an integer value\r\n\r\n### Examples:\r\n    var vec = new Victor(100.2, 50.9);\r\n\r\n    vec.unfloat();\r\n    vec.toString();\r\n    // => x:100, y:51\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## mixX(vector, amount)\r\n\r\nPerforms a linear blend / interpolation of the X axis towards another vector\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 100);\r\n    var vec2 = new Victor(200, 200);\r\n\r\n    vec1.mixX(vec2, 0.5);\r\n    vec.toString();\r\n    // => x:150, y:100\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The other vector\r\n* **Number** *amount* The blend amount (optional, default: 0.5)\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## mixY(vector, amount)\r\n\r\nPerforms a linear blend / interpolation of the Y axis towards another vector\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 100);\r\n    var vec2 = new Victor(200, 200);\r\n\r\n    vec1.mixY(vec2, 0.5);\r\n    vec.toString();\r\n    // => x:100, y:150\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The other vector\r\n* **Number** *amount* The blend amount (optional, default: 0.5)\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n## mix(vector, amount)\r\n\r\nPerforms a linear blend / interpolation towards another vector\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 100);\r\n    var vec2 = new Victor(200, 200);\r\n\r\n    vec1.mix(vec2, 0.5);\r\n    vec.toString();\r\n    // => x:150, y:150\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The other vector\r\n* **Number** *amount* The blend amount (optional, default: 0.5)\r\n\r\n### Return:\r\n\r\n* **Victor** `this` for chaining capabilities\r\n\r\n# Products\r\n\r\n## copy()\r\n\r\nCreates a copy of this vector\r\n\r\n### Examples:\r\n    var vec1 = new Victor(10, 10);\r\n    var vec2 = vec1.copy();\r\n\r\n    vec2.toString();\r\n    // => x:10, y:10\r\n\r\n### Return:\r\n\r\n* **Victor** A copy of the vector\r\n\r\n## dot(vector)\r\n\r\nCalculates the dot product of this vector and another\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = new Victor(200, 60);\r\n\r\n    vec1.dot(vec2);\r\n    // => 23000\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The second vector\r\n\r\n### Return:\r\n\r\n* **Number** Dot product\r\n\r\n## distanceX(vector)\r\n\r\nCalculates the distance of the X axis between this vector and another\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = new Victor(200, 60);\r\n\r\n    vec1.distanceX(vec2);\r\n    // => -100\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The second vector\r\n\r\n### Return:\r\n\r\n* **Number** Distance\r\n\r\n## absDistanceX(vector)\r\n\r\nSame as `distanceX()` but always returns an absolute number\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = new Victor(200, 60);\r\n\r\n    vec1.absDistanceX(vec2);\r\n    // => 100\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The second vector\r\n\r\n### Return:\r\n\r\n* **Number** Absolute distance\r\n\r\n## distanceY(vector)\r\n\r\nCalculates the distance of the Y axis between this vector and another\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = new Victor(200, 60);\r\n\r\n    vec1.distanceY(vec2);\r\n    // => -10\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The second vector\r\n\r\n### Return:\r\n\r\n* **Number** Distance\r\n\r\n## absDistanceY(vector)\r\n\r\nSame as `distanceY()` but always returns an absolute number\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = new Victor(200, 60);\r\n\r\n    vec1.distanceY(vec2);\r\n    // => 10\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The second vector\r\n\r\n### Return:\r\n\r\n* **Number** Absolute distance\r\n\r\n## distance(vector)\r\n\r\nCalculates the euclidean distance between this vector and another\r\n\r\n### Examples:\r\n    var vec1 = new Victor(100, 50);\r\n    var vec2 = new Victor(200, 60);\r\n\r\n    vec1.distance(vec2);\r\n    // => 100.4987562112089\r\n\r\n### Params: \r\n\r\n* **Victor** *vector* The second vector\r\n\r\n### Return:\r\n\r\n* **Number** Distance\r\n\r\n## length()\r\n\r\nCalculates the length or magnitude of the vector\r\n\r\n### Examples:\r\n    var vec = new Victor(100, 50);\r\n\r\n    vec.length();\r\n    // => 111.80339887498948\r\n\r\n### Return:\r\n\r\n* **Number** Length / Magnitude\r\n\r\n# Utility Methods\r\n\r\n## toString()\r\n\r\nReturns an string representation of the vector\r\n\r\n### Examples:\r\n    var vec = new Victor(10, 20);\r\n\r\n    vec.toString();\r\n    // => x:10, y:20\r\n\r\n### Return:\r\n\r\n* **String** \r\n\r\n## toArray()\r\n\r\nReturns an array representation of the vector\r\n\r\n### Examples:\r\n    var vec = new Victor(10, 20);\r\n\r\n    vec.toArray();\r\n    // => [10, 20]\r\n\r\n### Return:\r\n\r\n* **Array** \r\n\r\n## toObject()\r\n\r\nReturns an object representation of the vector\r\n\r\n### Examples:\r\n    var vec = new Victor(10, 20);\r\n\r\n    vec.toObject();\r\n    // => { x: 10, y: 20 }\r\n\r\n### Return:\r\n\r\n* **Object** ","google":"UA-49606192-1","note":"Don't delete this file! It's used internally to help with page regeneration."}